!function(e){"use strict";e.module("jiraCaptureLogs.provider",[]),e.module("jiraCaptureLogs.http",[]),e.module("jiraCaptureLogs.config",[]),e.module("jiraCaptureLogs.service",[]),e.module("jiraCaptureLogs.directive",[]),e.module("jiraCaptureLogs",["jiraCaptureLogs.provider","jiraCaptureLogs.http","jiraCaptureLogs.service","jiraCaptureLogs.config","jiraCaptureLogs.directive"])}(angular),function(e){"use strict";function t(e){e.interceptors.push("jiraCaptureLogsHttpInterceptor")}e.module("jiraCaptureLogs.config").config(t)}(angular),function(e){"use strict";function t(){var e={restrict:"EA",template:'<pre style="display: none;" id="{{vm.jiraCaptureId}}">{{vm.refreshContextView()}}</pre>',scope:{userInfo:"="},controller:r,controllerAs:"vm",bindToController:!0};return e}function r(e,t){function r(){var t=e.getUserHistoryLog(),r=e.getTechHistoryLog(),o="Version API SP: "+(n?n:"")+"\n\n";return i.userInfo&&i.userInfo.isLogged?(o+="Utilisateur actuellement identifié :\n\n",o+="* login: "+i.userInfo.login+"\n"):o+="Utilisateur actuellement non identifié.\n",t&&t.length>0&&(o+="\nDerniers événements fonctionnels:\n\n",t.forEach(function(e){o+="* "+e.date+" - "+e.msg+"\n"})),r&&r.length>0&&(o+="\nDerniers événements techniques:\n\n",r.forEach(function(e){o+="* "+e.date+" - "+e.msg+"\n"})),o}var n,i=this;i.refreshContextView=r,i.jiraCaptureId=t.jiraCaptureId,t.appVersion().then(function(e){n=e})}e.module("jiraCaptureLogs.directive").directive("jiraCaptureLogs",t),r.$inject=["jiraCaptureLogs","jiraCaptureLogsSettings"]}(angular),function(e){"use strict";function t(e,t,r){var n={request:function(e){return r.invoke(function(r){for(var n=[],i=0;i<r.apiName.length;i++)e&&e.url&&0===e.url.indexOf(r.apiName[i])&&e.url.indexOf("/info")<=0&&n.push(e.url);if(n.length){var o="appel API : "+e.method+" "+e.url;t.addTechHistoryLog(o)}}),e},requestError:function(n){return r.invoke(function(e){for(var r=[],i=0;i<e.apiName.length;i++)n&&n.url&&0===n.url.indexOf(e.apiName[i])&&n.url.indexOf("/info")<=0&&r.push(n.url);if(r.length){var o="{color:red}appel API : "+n.method+" "+n.url;n.data&&n.data.message&&(o+=', message "'+n.data.message+'"'),o+="{color}",t.addTechHistoryLog(o)}}),e.reject(n)},response:function(e){return r.invoke(function(r){for(var n=[],i=0;i<r.apiName.length;i++)e.config&&e.config.url&&0===e.config.url.indexOf(r.apiName[i])&&e.config.url.indexOf("/info")<=0&&n.push(e.config.url);if(n.length){var o="réponse API : "+e.config.method+" "+e.config.url+", code "+e.status;t.addTechHistoryLog(o)}}),e},responseError:function(n){return r.invoke(function(e){for(var r=[],i=0;i<e.apiName.length;i++)n.config&&n.config.url&&0===n.config.url.indexOf(e.apiName[i])&&n.config.url.indexOf("/info")<=0&&r.push(n.config.url);if(r.length){var o="{color:red}réponse API : "+n.config.method+" "+n.config.url+", code "+n.status;n.data&&n.data.message&&(o+=', message "'+n.data.message+'"'),o+="{color}",t.addTechHistoryLog(o)}}),e.reject(n)}};return n}e.module("jiraCaptureLogs.http").factory("jiraCaptureLogsHttpInterceptor",t),t.$inject=["$q","jiraCaptureLogs","$injector"]}(angular),function(e){"use strict";function t(){var e,t,r="",n="",i="",o=[];this.setUrlAppVersion=function(e){i=e},this.setApiName=function(e){o=e},this.setId=function(e){n=e},this.setTechLogsLength=function(t){e=t},this.setUserLogsLength=function(e){t=e},this.$get=["$http",function(a){function u(e){return e&&e.data?r=e.data.build.version:void 0}return{appVersion:function(){return i?a.get(i).then(u):void 0},apiName:o,jiraCaptureId:n,techLogsLength:e,userLogsLength:t}}]}e.module("jiraCaptureLogs.provider").provider("jiraCaptureLogsSettings",t)}(angular),function(e){"use strict";function t(e){function t(e){o.push({date:new Date,msg:e}),o.length>5&&o.shift()}function r(){return o}function n(t){e.invoke(function(e){var r=e.techLogsLength?e.techLogsLength:10,n=new Date,i=n.toLocaleString()+"."+n.getMilliseconds();a.push({date:i,msg:t}),a.length>r&&a.shift()})}function i(){return a}var o=[],a=[],u={addUserHistoryLog:t,getUserHistoryLog:r,addTechHistoryLog:n,getTechHistoryLog:i};return u}e.module("jiraCaptureLogs.service").factory("jiraCaptureLogs",t),t.$inject=["$injector"]}(angular);